pipeline {
    agent any
    environment {
        def imageName = "springappimagaug24"
        def imageTag = "latest"
        def containerName = 'springappcontainer3'
        def emailid = 'jathin.seerla@isowhiz.in'
        scriptLocation = '/var/lib/jenkins/workspace/work30/durable-3e44380e/script.sh'
    }
    tools {
        maven "M3"
    }

    stages {
        stage('Git Checkout') {
            steps {
                git 'https://github.com/Jathin-Sagar/task3.git'
            }
        }
        stage('Maven Build') {
            steps {
                sh "mvn -Dmaven.test.failure.ignore=true clean package"
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    sh 'docker build -t $imageName -f Dockerfile .'
                }
            }
        }
        stage('Image Scan') {
            steps {
                script {
                    sh 'trivy --version'
                    sh "trivy image $imageName"
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                script {
                    def dockerHubCreds = credentials('docker_isw147')
                    withCredentials([usernamePassword(credentialsId: 'docker_isw147', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"
                        sh "docker tag $imageName:$imageTag seerlajathin/$imageName:$imageTag"
                        sh "docker push seerlajathin/$imageName:$imageTag"
                        sh 'docker logout'
                    }
                }
            }
        }
        stage('PULL From DOCKERHUB') {
            steps {
                script {
                    sh "docker pull seerlajathin/$imageName:$imageTag"
                }
            }
        }
  
        stage('Run Docker Container') {
            steps {
                script {
                    def existingContainer = sh(script: "docker ps -aqf name=${containerName}", returnStdout: true).trim()

                    if (existingContainer) {
                        echo "Stopping and removing existing container: $existingContainer"
                        sh "docker stop $existingContainer"
                        sh "docker rm $existingContainer"
                    }

                    // Run the shell script and capture the container ID
                    def containerId = sh(script: "$scriptLocation", returnStdout: true).trim()
                    echo "Container ID: $containerId"
                }
            }
        }
    }
}

